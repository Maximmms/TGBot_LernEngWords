import random
import telebot
import sqlalchemy

from sqlalchemy.orm import sessionmaker
from telebot import types, custom_filters, StateMemoryStorage
from telebot.states import StatesGroup, State
from config import *
from db import *

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –±–æ—Ç–∞
DSN = f"postgresql://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
engine = sqlalchemy.create_engine(DSN)
Session = sessionmaker(bind=engine)

print('Start telegram bot...')

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(TG_TOKEN, state_storage=state_storage)

known_users = []
userStep = {}
buttons = []


def show_hint(*lines):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª—é
    :param lines: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã –≤ –æ–¥–Ω—É –ø–æ–¥—Å–∫–∞–∑–∫—É.
    :return: –û–±—ä–µ–¥–∏–Ω–Ω–µ–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    """
    return '\n'.join(lines)


def show_target(data):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞.
    :param data: –°–ª–æ–≤–∞—Ä—å —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ü–µ–ª–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥
    :return: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–ª–µ–≤—ã–º —Å–ª–æ–≤–æ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º
    """
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    """
    –ö–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø–∞—Ä–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –±–æ—Ç–∞
    """
    target_word = State()
    translate_word = State()
    another_words = State()


def get_user_step(uid):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param uid: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return: –¢–µ–∫—É—â–∏–π —à–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if uid not in known_users:
        known_users.add(uid)
        userStep[uid] = 0
        print(f"New user detected: {uid}")
    return userStep.get(uid, 0)


def create_markup(buttons):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    :param buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    :return:–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    """
    markup = types.ReplyKeyboardMarkup(row_width=2)
    markup.add(*buttons)
    return markup

def initialize_user(session, username):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    :param session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not check_user_exist(session, username):
        add_user(session, username)

@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥: /cards –∏–ª–∏ /start
    """
    create_table(engine)
    with Session() as session:
        db_init(session)
        initialize_user(session, message.from_user.username)

    cid = message.chat.id
    if cid not in known_users:
        known_users.append(cid)
        userStep[cid] = 0
        bot.send_message(cid, f"Hello, {message.from_user.username}, let study English...")

    update_buttons(message)

def update_buttons(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏.
    """
    global buttons
    with Session() as session:
        target_word, translate = get_random_word_pair(session, message.from_user.username)
        others = get_random_words(session, target_word, message.from_user.username)

    buttons = [types.KeyboardButton(target_word)]
    buttons.extend([types.KeyboardButton(word) for word in others])
    random.shuffle(buttons)
    buttons.extend([types.KeyboardButton(Command.NEXT),
                    types.KeyboardButton(Command.ADD_WORD),
                    types.KeyboardButton(Command.DELETE_WORD)])

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    bot.send_message(message.chat.id, greeting, reply_markup=create_markup(buttons))
    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others


@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–∞–ª—å—à–µ ‚è≠"
    """
    update_buttons(message)


@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def handle_delete_word(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô". –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ –ø–ª–∞–Ω–∏—Ä—É–µ–º —É–¥–∞–ª–∏—Ç—å.
    """
    bot.send_message(message.chat.id, f'{message.from_user.username}, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å')
    bot.register_next_step_handler(message, process_delete_word)


def process_delete_word(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    word = message.text.lower()
    with Session() as session:
        if session.query(Words).filter_by(target_word=word).first():
            delete_word(session, word, message.chat.username)
            bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ <{word.capitalize()}> —É–¥–∞–ª–µ–Ω–æ!')
        else:
            bot.send_message(message.chat.id, f'{message.from_user.username}, –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞!!!')
    update_buttons(message)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def handle_add_word(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï". –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥.
    """
    bot.send_message(message.chat.id, f'{message.from_user.username}, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥')
    bot.register_next_step_handler(message, process_add_word)

def process_add_word(message):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä—ã —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
    """
    try:
        word, translate = message.text.lower().split()
        with Session() as session:
            count, status = add_word(session, word, translate, message.from_user.username)
            if status:
                bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ <{word.capitalize()}> –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ <{translate.capitalize()}> –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
            else:
                bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ <{word.capitalize()}> —É–∂–µ –µ—Å—Ç—å!')
        bot.send_message(message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–ª–æ–≤: {count}')
    except ValueError:
        bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')
    update_buttons(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞.
    :param message:
    :return:
    """
    text = message.text
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if text == target_word:
            hint = show_target(data)
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", hint]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == text:
                    btn.text = text + '‚ùå'
                    break
            hint = show_hint("–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞!", f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}")
    bot.send_message(message.chat.id, hint, reply_markup=create_markup(buttons))


bot.add_custom_filter(custom_filters.StateFilter(bot))
bot.infinity_polling(skip_pending=True)